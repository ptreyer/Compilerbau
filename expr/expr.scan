/* Project:  COCKTAIL training
 * Descr:    A simple pocket computer (scanner, parser, evaluator)
 * Kind:     Scanner specification
 * Author:   Prof. Dr. Juergen Vollmer <vollmer@dhbw-karlsruhe.de>
 * $Id: expr.scan,v 1.3 2010/04/23 20:39:36 vollmer Exp $
 */

SCANNER expr_scan

EXPORT {
/* code to be put intp Scanner.h */
# include "Position.h"

/* Token Attributes.
 * For each token with user defined attributes, we need a typedef for the
 * token attributes.
 * LPP extracts the token-attribute declaration from the parser specification.
 * They are inserted here.
 */
INSERT tScanAttribute
}

GLOBAL {
/* code to be put into Scanner.c */
# include <stdlib.h>
# include "Errors.h"

/* Insert the routine computing "error-values" of attributes, in case the
 * parser decides during error repair to insert a token.
 */
INSERT ErrorAttribute
}

LOCAL {
/* user-defined local variables of the generated GetToken routine */
# define MAX_STRING_LEN 2048
char string[MAX_STRING_LEN];int len;
}

DEFAULT {
  /* What happens if no scanner rule matches the input */
  MessageI ("Illegal character",
	    xxError, expr_scan_Attribute.Position,
	    xxCharacter, expr_scan_TokenPtr);
}

EOF {
  /* What should be done if the end-of-input-file has been reached? */

  /* E.g.: check hat strings and comments are closed. */
  switch (yyStartState) {
  case STD:
    /* ok */
    break;
  case COMMENT:
    Message ("unclosed comment",
	     xxError, expr_scan_Attribute.Position);
    break;
  case STR:
    Message ("String not closed", 
      xxError, expr_scan_Attribute.Position);
    break;
  default:
    Message ("OOPS: that should not happen!!",
	     xxFatal, expr_scan_Attribute.Position);
    break;
  }

  /* implicit: return the EofToken */
}

DEFINE /* some abbreviations */
  letter = {a-zA-Z_}   .
  digit  = {0-9}       .

/* define start states, note STD is defined by default */
START COMMENT, STR

RULES

/* Integers */
#STD# {0-9}+ :
	{expr_scan_GetWord (string);
	 expr_scan_Attribute.int_const.Value = atol (string);
	 return int_const;
	}

/* Float numbers */
#STD# digit + "." digit * (("E"|"e") ("+"|"-") ? digit +) ? :
	{expr_scan_GetWord (string);
	 expr_scan_Attribute.float_const.Value = atof (string);
	 return float_const;
	}

#STD# < "--" ANY * > :
        { /* comment up to end of line, nothing to do */
        }

/* comment */
#STD# "'''" :
	{ 
	  yyStart (COMMENT);
	}

#COMMENT# - {'\n\t} + | "'" | "''" :
        {}

#COMMENT# "'''" :
        {yyStart (STD);
	}

#STD# "#" ANY* : {}

INSERT RULES #STD#

#STD# \": {
  yyStart(STR);
  len = 0;
}

#STR# (digit|letter|" ")* : {
  if (len +expr_scan_TokenLength+1 >=MAX_STRING_LEN) {
    len =0;
  } else
  len += expr_scan_GetWord(&string[len]);
}

#STR# \" : {
  yyStart(STD);
  string[len] = '\0';
  expr_scan_Attribute.string_const.Value = malloc(len);
  strcpy(expr_scan_Attribute.string_const.Value, string);
  return string_const;
}

#STD# letter (letter | digit)*: {
  expr_scan_Attribute.identifier.Name = MakeIdent(expr_scan_TokenPtr,
  expr_scan_TokenLength);
  return identifier;
}

/**********************************************************************/
